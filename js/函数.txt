函数

概念：函数就是封装的一段可以被调用的代码块
目的：大量代码重复使用


1、声明函数和调用函数

1.1、声明函数
function 函数名（）{              // function 声明函数的关键字、注意：全部小写、 函数名一般是动词、函数不调用函数不执行
    //函数体
}

函数名 = () => {}            //箭头函数 

1.2、调用函数
函数名（）；

或：
(function(){})();       //  作用：创建独立作用域，避免变量冲突

或：
(function(){}());       //  作用：创建独立作用域，避免变量冲突


2.函数的参数：形参和实参（函数的参数可以有，也可以没有、形参的默认值是 undefined）

function 函数名（形参1，形参2...）{             // 形参是接收实参的   形参1='实参1'
    //函数体
}
函数名(实参1,实参2...);


3、函数的返回值 return 语句（正确用法）

function 函数名（形参1，形参2...）{
    return 需要返回的结果；                           //只要函数遇到 return 就把后面的结果 返回给函数调用者、函数名（）=return 后面的结果
}
console.log( 函数名（实参1,实参2...）)；

注意：return 会终止函数、return 只能返回一个值 如果以逗号隔开 以最后一个为准 但可以用数组解决


4、arguments（伪数组） 的使用

function fn() {
   console.log(arguments);           //arguments 里面存储了所有传递过来的实参
   console.log(arguments[2]);      // 输出：3
}
fn(1,2,3);

注意：
1、伪数组 并不是真正意义上的数组
2、具有数组的 length 属性
3、按照索引的方式进行存储的
4、它没有真正数组的一些方法 比如 pop() push() 等等


5、函数是可以相互调用的

function fn1() {
console.log(22);
fn2();                                 //在 fn1 函数里调用了 fn2 函数
}
function fn() {
console.log(11);
}
fn1()；                              //输出：22 和 11

6、函数表达式（匿名函数）
var 变量名 = function（）{}

如：
var fun = function（）{
   console.log（'我是你爸爸'）；
}
fun（）；                                       //输出：我是你爸爸

注意：fun 是变量名 不是函数名