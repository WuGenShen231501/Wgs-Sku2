流程控制 : 顺序结构、分支结构、循环结构

1、分支语句：if  else
if（条件表达式）{
//执行语句1
} 
else{
//执行语句2
}

执行思路：如果表达式为真，执行语句1，如果为假，执行语句2。
注意：只能执行一个语句、else后面直接跟大括号


1.2、多分支语句：if  else if
if（条件表达式1）{
   //执行语句1；
} else if （条件表达式2）{
   //执行语句2；
}else if （条件表达式3）{
   //执行语句3；
}else {
   //执行语句4；
}

执行思路：如果表达式1为真，执行语句1，如果为假，判断表达式2，如果表达式2为真，执行语句2，如果为假，判断表达式3...以此类推
注意：只能执行一个语句、else 和 if 中间有空格


2、三元表达式：有三元运算符组成的式子称为三元运算符 （简化版的 if else）
条件表达式 ？ 表达式1（真时执行） ：表达式2  （假时执行）；


3、分支流程控制 switch 语句 ：当要针对变量设置一系列的特定值的选择时，就用 switch
switch（表达式）{
   case value1：               匹配值1
      执行语句1；               真时执行
     break；                       结束
   case value2：
      执行语句2；
     break；
   case value3：
      执行语句3；
     break；
   default：
      执行最后的语句；
}

注意：case 要全等与表达式 


4、循环结构

4.1、for 循环：重复执行某些代码，通常跟计数有关系
for（初始化变量 ；条件表达式 ；操作表达式 ）{
      //循环体
}

初始化变量：就是用 var 声明的一个变量，通常用与计数器作用
条件表达式：决定是否执行或终止条件
操作表达式：是每次循环最后执行的代码，用与计数器的更新

执行顺序：1、初始化变量（全程只执行一次）2、条件表达式 3、循环体 4、操作表达式（最后执行）


4.2、双重 for 循环
for（外层的初始化变量 ；外层的条件表达式 ；外层的操作表达式 ）{
      for（里层的初始化变量 ；里层的条件表达式 ；里层的操作表达式 ）{
         //循环体
      }
}

注意：外层循环一次，里层的循环全部


4.3、while 循环
while（条件表达式）{
    //循环体
}

如：
 var num = 1;
 while (num <= 100) {
     console.log('你好啊');
     num++;
 }

执行思路：当条件表达式为 true 时，则执行循环体 否则 推出循环体
注意：里面也有 计数器、初始化变量、操作表达式


4.4、do while 循环：while 循环的变体
do {
   //循环体
} while（条件表达式）

执行思路：跟 while 不同的地方在于 do while 先执行一次循环体 再判断条件


5、continue 关键字
作用：continue 关键字用于立即跳出本次循环，继续下一次循环（本次循环中 continue 后的代码会少执行一次）

如：
for (i = 1; i <= 5; i++) {
    if (i == 3) {
        continue;
    }
    console.log('正在吃第' + i + '个包子');
}


5.2、break 关键字
作用：break 关键字用于立即跳出整个循环


6、检测JS代码是否报错
try {
  // 可能产生错误的代码
} catch (error) {
  // 这个块会在 try 中有错误抛出时执行
}

